@namespace("sherpa.protocol")
protocol SherpaServer {
  
  // TYPES
  
  record IRI {
    string iri;
  }
  
  record BNode {
    string label;
  }
  
  record PlainLiteral {
    string lexical;
    string language;
  }
  
  record TypedLiteral {
    string lexical;
    string datatype;
  }
  
  record QueryRequest {
    string sparql;
    map<string> parameters;
    map<string> properties;
  }
  
  record QueryResponse {
    string queryId;
    union { array<string>, null } vars;
  }

  record DataRequest {
    string queryId;
    int startRow;
    int maxSize;
  }
  
  record DataResponse {
    string queryId;
    int startRow;
    boolean more;
    array<array<union {IRI, BNode, PlainLiteral, TypedLiteral, 
                       string, boolean, int, long, float, double,
                       null} >> data;
  }

  record CancelRequest {
    string queryId;
  }
  
  record CloseRequest {
    string queryId;
  }
  
  record CloseResponse {
    string queryId;
  }
  
  enum ReasonCode {
    Close, Cancel, Timeout, Error
  } 
  
  record ServerException {
    string message;
    union {string, null} errorType;
    union {bytes, null} stackTrace;
    union {ServerException, null} cause;
  }
  
  error ErrorResponse {
    ReasonCode code;
    union {ServerException, null} serverException;
  }
  
  // MESSAGES

  /** Initial query request **/
  QueryResponse query( QueryRequest queryRequest ) throws ErrorResponse;
  
  /** Data request **/
  DataResponse data( DataRequest dataRequest ) throws ErrorResponse;
 
  /** Request to close a query **/
  CloseResponse close( CloseRequest closeRequest ) throws ErrorResponse;

  /** Request to cancel a query **/
  CloseResponse cancel( CancelRequest cancelRequest ) throws ErrorResponse; 
  
}